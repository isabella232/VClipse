grammar org.vclipse.vcml.VCML with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate vcml "http://www.vclipse.org/vcml"

Model 
	:	{Model}
		('options' '{' (options+=Option)* '}')?
    	(objects+=VCObject)*
    ;

Option
	: name=OptionType '=' value=STRING
	;
	
enum OptionType
	: ECM // engineering change master
	| UPS // set to ID of header material, if UPS IDocs and segments should be generated
	;

// this enforces that all VCObjects have a name attribute
DummyRule returns VCObject
	:	name=STRING
	;
	
VCObject :
	  Characteristic
	| Class
	| Constraint 
	| SelectionCondition 
	| Precondition 
	| Procedure 
	| DependencyNet
	| Material
	| InterfaceDesign
	| VariantFunction
	| VariantTable
	| VariantTableContent
	;

// concrete classes

BillOfMaterial :
	{BillOfMaterial}
	'billofmaterial' '{'
		('items' '{' items+=BOMItem* '}')?
	//	('classitems' '{' classitems+=BOMItem* '}')? // currently deactivated
	'}'
	;

BOMItem :
	itemnumber=INT
	material=[Material | EXTENDED_ID]
	('dependencies' '{'
	  (selectionCondition=[SelectionCondition | ID])?
	  (entries+=ConfigurationProfileEntry)*
	 '}')?
	;

Characteristic :
	'characteristic' name=ID ('{'
	(	description=Description
	&	documentation=Documentation?
	&	type=CharacteristicType
	&	('status' status=Status)?
	&	('group' group=STRING)?
	&	('[' (  additionalValues?='additionalValues'?
	     	  & required?='required'?
	     	  & restrictable?='restrictable'?
	     	  & noDisplay?='noDisplay'?
	    	  & notReadyForInput?='notReadyForInput'?
	   	      & multiValue?='multiValue'?
	    	  & displayAllowedValues?='displayAllowedValues'?
	     	 )
		']')?
    &	dependencies=CharacteristicOrValueDependencies?
    )
	'}')?
	;

CharacteristicType :
		NumericType
	|	SymbolicType
	;

NumericType : 
	'numeric' '{'
	(	('numberOfChars' numberOfChars=INT)
	&	('decimalPlaces' decimalPlaces=INT)
	&	('unit' unit=STRING)?
	&	('[' (	negativeValuesAllowed?='negativeValuesAllowed'?
	     	 &	intervalValuesAllowed?='intervalValuesAllowed'?
	     	 )
	 	']')?
	&	('values' '{' values+=NumericCharacteristicValue* '}')?
	)
	'}'
	;
	
SymbolicType :
	'symbolic' '{'
	(	('numberOfChars' numberOfChars=INT)
	&	('[' caseSensitive?='caseSensitive'? ']')?
	&	('values' '{' values+=CharacteristicValue* '}')?
	)
	'}'
	;

CharacteristicValue :
	name=EXTENDED_ID
	('{'
	  (	description=Description?
	  &	documentation=Documentation?
	  &	dependencies=CharacteristicOrValueDependencies?
	  )
	'}')?
	;

NumericCharacteristicValue :
	name=NUMBER
    dependencies=CharacteristicOrValueDependencies?
	;

CharacteristicOrValueDependencies :
	{CharacteristicOrValueDependencies}
	'dependencies' '{'
		localPrecondition=LocalPrecondition?
		localSelectionCondition=LocalSelectionCondition?
		dependencies+=[GlobalDependency | ID]*
	'}'
	;

Class :
	'class' name=CLASSNAME ('{'
		(	description=Description
		&	('status' status=Status)?
		&	('group' group=STRING)?
		&	('characteristics' '{' 
				characteristics+=[Characteristic|ID]* 
			'}')
		&	('superclasses' '{' 
				superClasses+=[Class | CLASSNAME]*
			'}')?
		)
	'}')?
	;

CLASSNAME
	:	'(' INT ')' ID
	;

ConfigurationProfile :
    'configurationprofile' name=EXTENDED_ID '{'
	   (	('status' status=Status)?
	   &	('bomapplication' bomapplication=ID)
	   &	('uidesign' uidesign=[InterfaceDesign | EXTENDED_ID])?
	   )
       (dependencyNets+=[DependencyNet|ID])*
       (entries+=ConfigurationProfileEntry)*
    '}'
    ;

Dependency
	:	GlobalDependency
	|	LocalDependency
	;

GlobalDependency // just for inheritence
	: 	Procedure
	| 	SelectionCondition
	| 	Precondition
	| 	Constraint
	;

LocalDependency
	:	LocalSelectionCondition
	|	LocalPrecondition
	;

Procedure :
    'procedure' name=ID ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ProcedureSource
    		'}')?
    	)
    '}')?
    ;

SelectionCondition :
    'selectioncondition' name=ID ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ConditionSource
    		'}')?
    	)
    '}')?
    ;

LocalSelectionCondition :
	{LocalSelectionCondition}
    'selectioncondition' '{'
		(	description=Description?
		&	documentation=Documentation?
		&	('status' status=Status)?
		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ConditionSource
    		'}')?
    	)
    '}'
    ;

GeneralSelectionCondition
	:	SelectionCondition
	|	LocalSelectionCondition
	;

Precondition :
    'precondition' name=ID ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ConditionSource
    		'}')?
    	)
    '}')?
    ;

LocalPrecondition :
	{LocalPrecondition}
    'precondition' '{'
		(	description=Description?
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ConditionSource
    		'}')?
    	)
    '}'
    ;

GeneralPrecondition :
		Precondition
	|   LocalPrecondition
	;

ConditionSource hidden (WS, DEPENDENCY_COMMENT):
	condition=Condition_P '.'
	;

DependencyNet :
	'dependencynet' name=ID ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
 		)
		(constraints+=[Constraint | ID])*
	'}')?
	;

Constraint :
    'constraint' name=ID ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
    	&	('source' '{'
    			source=ConstraintSource
    		'}')?
    	)
    '}')?
    ;

ConfigurationProfileEntry :
    sequence=INT dependency=[Procedure|ID]
    ;

InterfaceDesign :
	'interfacedesign' name=EXTENDED_ID ('{'
		(characteristicGroups+=CharacteristicGroup)*
	'}')?
	;

CharacteristicGroup :
	'characteristicgroup' name=EXTENDED_ID '{'
		description=Description
		(characteristics+=[Characteristic | ID])*
	'}'
	;    

Material : 
	'material' name=EXTENDED_ID ('{'
		(	description=Description
		&	('type' type=ID)
		)
		billofmaterials+=BillOfMaterial*
		('classes' '{' classes+=[Class|CLASSNAME]* '}')?
		configurationprofiles+=ConfigurationProfile*
	'}')?
	;
	
VariantFunction :
	'variantfunction' name=ID ('{'
		(	description=Description
		&	('status' status=Status)?
		&	('group' group=STRING)?
		&	('arguments' '{' (arguments+=VariantFunctionArgument)* '}')
		)
		'}')?
	; 
	
VariantFunctionArgument
	:	(in?='in')? characteristic=[Characteristic|ID]
	;
	
VariantTable
	:	'varianttable' name=ID ('{'
			(	description=Description
			&	('status' status=Status)?
			&	('group' group=STRING)?
			&	('arguments' '{' (arguments+=VariantTableArgument)* '}')
			)
		'}')?
	; 
	
VariantTableArgument
	:	(key?='key')? characteristic=[Characteristic|ID]
	;

VariantTableContent
	:	'varianttablecontent' table=[VariantTable | ID] '{'
			rows += Row*
		'}'
	;

Row 
	:	{Row}
		'row' values+=(SymbolicLiteral | NumericLiteral)*
	;

// auxiliary grammar rules
enum Status : Released = 'released' | InPreparation = 'inPreparation' | Locked = 'locked';

Description : 
	  SimpleDescription
	| MultiLanguageDescriptions
	;
	
SimpleDescription :
    'description' value=STRING
    ;

MultiLanguageDescriptions : 
	{MultiLanguageDescriptions}
	'description' '{' (descriptions+=MultiLanguageDescription)* '}'
	;

MultiLanguageDescription :
	language=Language value=STRING
	;
	
enum Language
	:	AF // Afrikaans       
	|	AR // Arabic          
	|	BG // Bulgarian       
	|	CA // Catalan         
	|	CS // Czech           
	|	DA // Danish          
	|	DE // German          
	|	EL // Greek           
	|	EN // English         
	|	ES // Spanish         
	|	ET // Estonian        
	|	FI // Finnish         
	|	FR // French          
	|	HE // Hebrew          
	|	HR // Croatian        
	|	HU // Hungarian       
	|	ID // Indonesian      
	|	IS // Icelandic       
	|	IT // Italian         
	|	JA // Japanese        
	|	KO // Korean          
	|	LT // Lithuanian      
	|	LV // Latvian         
	|	MS // Malaysian       
	|	NL // Dutch           
	|	NO // Norwegian       
	|	PL // Polish          
	|	PT // Portuguese      
	|	RO // Romanian        
	|	RU // Russian         
	|	SH // Serbian (Latin) 
	|	SK // Slovakian       
	|	SL // Slovenian       
	|	SR // Serbian         
	|	SV // Swedish         
	|	TH // Thai            
	|	TR // Turkish         
	|	UK // Ukrainian       
	|	Z1 // Customer reserve
	|	ZF // Chinese trad.   
	|	ZH // Chinese         
	;

Documentation :
	  SimpleDocumentation
	| MultipleLanguageDocumentation
	;
	
SimpleDocumentation :
	'documentation' value=STRING
	;
	
MultipleLanguageDocumentation :
	{MultipleLanguageDocumentation}
	'documentation' '{' (languageblocks+=MultipleLanguageDocumentation_LanguageBlock)* '}'
	;

MultipleLanguageDocumentation_LanguageBlock :
	language=Language (formattedDocumentationBlocks+=FormattedDocumentationBlock)*
	;

FormattedDocumentationBlock :
	value=STRING ('format' format=STRING)?
	; 

///////////////////////////////////////////////////////////////////////////////
// code representation: constraints
///////////////////////////////////////////////////////////////////////////////

ConstraintSource hidden (WS, DEPENDENCY_COMMENT)
	:   'objects' ':'	objects+=ConstraintObject (',' objects+=ConstraintObject)* '.'?

		('condition' ':' condition=Condition_C '.'?)?

		('restriction' | 'restrictions') ':'
		restrictions+=ConditionalConstraintRestriction (',' restrictions+=ConditionalConstraintRestriction)*
		'.'?

		('inferences' ':' inferences+=CharacteristicReference_C (',' inferences+=CharacteristicReference_C)* '.'?)?
    ;

ConstraintObject
	:	ConstraintClass
	|	ConstraintMaterial 
	;
	
ConstraintClass
	:	(name=SHORTVAR 'is_a')? class=[Class|CLASSNAME] 
		(	'where'
			shortVars+=ShortVarDefinition (';' shortVars+=ShortVarDefinition)*
		)?
	;

ConstraintMaterial
	:	(name=SHORTVAR 'is_object')? objectType=ObjectType
		(	'where'
			shortVars+=ShortVarDefinition (';' shortVars+=ShortVarDefinition)*
		)?
	;

ObjectType
	:	'(' type='material' ')' '(' classType=INT ')' '(' attrs+=PartialKey (',' attrs+=PartialKey)* ')'
	;

 // TODO how to handle cross references?
PartialKey
	:	name='nr' '=' value=SYMBOL
	;

ShortVarDefinition
	:	name=SHORTVAR '=' characteristic=[Characteristic | ID]
	;

PartOfCondition :
	'part_of' '(' child=[ConstraintObject | SHORTVAR] ',' parent=[ConstraintObject | SHORTVAR] ')'
	; 
SubpartOfCondition :
	'subpart_of' '(' child=[ConstraintObject | SHORTVAR] ',' parent=[ConstraintObject | SHORTVAR] ')'
	; 

ConditionalConstraintRestriction returns ConstraintRestriction :
	ConstraintRestrictionLHS ({ConditionalConstraintRestriction.restriction=current} 'if' condition=Condition_C)?
	;

ConstraintRestrictionFalse
	:	{ConstraintRestrictionFalse}
	   'false'
	;

ConstraintRestrictionLHS returns ConstraintRestriction
	:	InCondition_C
	|	IsSpecified_C
	|	PartOfCondition
	|	SubpartOfCondition
	|	Comparison_C
	|	Table_C
	|	Function_C
	|	NegatedConstraintRestrictionLHS
	|	ConstraintRestrictionFalse
	;
	
NegatedConstraintRestrictionLHS
	:	'not' restriction=(Table_C | Function_C)
	;

/*
EqualsRestriction :
	characteristic=CharacteristicReference_C '=' expression=Expression_C
	;
*/

CharacteristicReference_C
	:	ObjectCharacteristicReference
	|	ShortVarReference
	;
	
ObjectCharacteristicReference
	:	location=[ConstraintObject | SHORTVAR] '.' characteristic=[Characteristic|ID]
	;

ShortVarReference
	:	ref=[ShortVarDefinition | SHORTVAR]
	;



///////////////////////////////////////////////////////////////////////////////
// code representation: procedures
///////////////////////////////////////////////////////////////////////////////

ProcedureSource hidden (WS, DEPENDENCY_COMMENT):
	statements+=Statement (',' statements+=Statement)* '.'?
	;

Statement
	:	(SimpleStatement | CompoundStatement) ({ConditionalStatement.statement=current} 'if' condition=Condition_P)?
	;

CompoundStatement
	:	'(' statements+=SimpleStatement (',' statements+=SimpleStatement)* ')'
	;

SimpleStatement
	:	Assignment
	|	Function_P
	|	PFunction
	|	Table_P
	|	SetOrDelDefault
	|	IsInvisible
	|	SetPricingFactor
	;

Assignment
	:	'$self' '.' characteristic=[Characteristic | ID] '=' expression=Expression_P
    ;

FunctionOrTable
	:	Function_C
	|	Function_P
	|	PFunction
	|	Table_C
	|	Table_P
	;

Function_C returns Function
	:	'function' function=[VariantFunction|ID]
		'('
			characteristics+=[Characteristic|ID] '=' values+=Literal_C
			(',' characteristics+=[Characteristic|ID] '=' values+=Literal_C)*
		')'
	;

Function_P returns Function
	:	'function' function=[VariantFunction|ID]
		'('
			characteristics+=[Characteristic|ID] '=' values+=Literal_P
			(',' characteristics+=[Characteristic|ID] '=' values+=Literal_P)*
		')'
	;

PFunction
	:	'pfunction' function=[VariantFunction|ID]
		'('
			characteristics+=[Characteristic|ID] '=' values+=Literal_P
			(',' characteristics+=[Characteristic|ID] '=' values+=Literal_P)*
		')'
	;

Table_C returns Table
	:	'table' table=[VariantTable|ID]
		'('
			characteristics+=[Characteristic|ID] '=' values+=Literal_C
			(',' characteristics+=[Characteristic|ID] '=' values+=Literal_C)*
		')'
	;
	
Table_P returns Table
	:	'table' table=[VariantTable|ID]
		'('
			characteristics+=[Characteristic|ID] '=' values+=Literal_P
			(',' characteristics+=[Characteristic|ID] '=' values+=Literal_P)*
		')'
	;

SetOrDelDefault
	:	SetDefault
	|	DelDefault
	;

SetDefault
	:	'$set_default' '(' '$self' ',' characteristic=[Characteristic | ID] ',' expression=Expression_P ')'
	|	'$self' '.' characteristic=[Characteristic | ID] '?=' expression=Expression_P
    ;

DelDefault
	:	'$del_default' '(' '$self' ',' characteristic=[Characteristic | ID] ',' expression=Expression_P ')'
    ;

IsInvisible
	:	'$self' '.' characteristic=[Characteristic | ID] 'is' 'invisible'
	;
	
SetPricingFactor
	:	'$set_pricing_factor' '(' location=ProcedureLocation ',' characteristic=[Characteristic|ID] ',' arg1=Expression_P ',' arg2=Expression_P ')'
	;

CharacteristicReference_P :
	(location=ProcedureLocation '.')? characteristic=[Characteristic|ID]
	;

///////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////

Expression_C returns Expression
    :	MultiplicativeExpression_C ({BinaryExpression.left=current} operator=("+" | '-') right=MultiplicativeExpression_C)*
	;
	
Expression_P returns Expression
    :	MultiplicativeExpression_P ({BinaryExpression.left=current} operator=("+" | '-') right=MultiplicativeExpression_P)*
	;
	
MultiplicativeExpression_C returns Expression
	:	UnaryPrimaryExpression_C ({BinaryExpression.left=current} operator=('*' | '/' | '||') right=UnaryPrimaryExpression_C)*
    ;

MultiplicativeExpression_P returns Expression
	:	UnaryPrimaryExpression_P ({BinaryExpression.left=current} operator=('*' | '/' | '||') right=UnaryPrimaryExpression_P)*
    ;

UnaryPrimaryExpression_C returns Expression
	:	UnaryExpression_C
	|	PrimaryExpression_C
	;

UnaryPrimaryExpression_P returns Expression
	:	UnaryExpression_P
	|	PrimaryExpression_P
	;
	
UnaryExpression_C returns UnaryExpression
	:	operator=UnaryExpressionOperator expression=UnaryPrimaryExpression_C
	;
	
UnaryExpression_P returns UnaryExpression
	:	operator=UnaryExpressionOperator expression=UnaryPrimaryExpression_P
	;
	
PrimaryExpression_C returns Expression
	:	'(' Expression_C ')'
	|	Literal_C
	|	FunctionCall_C
	;	

PrimaryExpression_P returns Expression
	:	'(' Expression_P ')'
	|	Literal_P
	|	FunctionCall_P
	|	SumParts
	|	CountParts
	;	

Literal_C returns Literal
	:	CharacteristicReference_C
	| 	MDataCharacteristic_C
	|	NumericLiteral
	|	SymbolicLiteral
	;

Literal_P returns Literal
	:	CharacteristicReference_P
	|	MDataCharacteristic_P
	|	NumericLiteral
	|	SymbolicLiteral
	;

FunctionCall_C returns FunctionCall
	:	function=FunctionName '(' argument=Expression_C ')'
	;

FunctionCall_P returns FunctionCall
	:	function=FunctionName '(' argument=Expression_P ')'
	;

SumParts
	:	'$sum_parts' '(' location=ProcedureLocation ',' characteristic=[Characteristic|ID] ')'
	;

CountParts
	:	'$count_parts' '(' location=ProcedureLocation ')'
	; 

MDataCharacteristic_C
	:	'mdata' characteristic=CharacteristicReference_C
	;

MDataCharacteristic_P
	:	'mdata' characteristic=CharacteristicReference_P
	;
	
NumericLiteral :
	value=NUMBER
	;

SymbolicLiteral :
	value=SYMBOL
	;

///////////////////////////////////////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////////////////////////////////////

Condition_C returns Condition
	:	Conjunction_C ({BinaryCondition.left=current} operator='or' right=Conjunction_C)* 
	; 

Condition_P returns Condition
	:	Conjunction_P ({BinaryCondition.left=current} operator='or' right=Conjunction_P)* 
	; 

Conjunction_C returns Condition
	:	Negation_C ({BinaryCondition.left=current} operator='and' right=Negation_C)*
	; 

Conjunction_P returns Condition
	:	Negation_P ({BinaryCondition.left=current} operator='and' right=Negation_P)*
	; 

Negation_C returns Condition
	:	UnaryCondition_C
	|	PrimaryCondition_C
	;

Negation_P returns Condition
	:	UnaryCondition_P
	|	PrimaryCondition_P
	;

UnaryCondition_C returns UnaryCondition
	:	'not' condition=Negation_C // not may be nested in constraints
	;

UnaryCondition_P returns UnaryCondition
	:	'not' condition=PrimaryCondition_P
	;

// TODO not must not be used around specified, part_of and subpart_of - put into validation

PrimaryCondition_C returns Condition
	:	Comparison_C
	|	'(' Condition_C ')'
 	|	InCondition_C
 	|	IsSpecified_C
 	|	PartOfCondition
	|	SubpartOfCondition 
	;

PrimaryCondition_P returns Condition
	:	Comparison_P
	|	'(' Condition_P ')'
 	|	InCondition_P
 	|	IsSpecified_P
 	|   TypeOf
	;

Comparison_C returns Comparison
	:	left=Expression_C operator=ComparisonOperator right=Expression_C
	;

Comparison_P returns Comparison
	:	left=Expression_P operator=ComparisonOperator right=Expression_P
	;

IsSpecified_C
	:	characteristic=CharacteristicReference_C 'specified'
	|	'specified' characteristic=CharacteristicReference_C
    ;

IsSpecified_P
	:	characteristic=CharacteristicReference_P 'specified'
	|	'specified' characteristic=CharacteristicReference_P
    ;

TypeOf
	:	'type_of' '(' location=ProcedureLocation ',' variantclass=ObjectType ')'
	;
	 
InCondition_C
	:	characteristic=CharacteristicReference_C 'in' list=List
	;

InCondition_P
	:	characteristic=CharacteristicReference_P 'in' list=List
	;

List :
		NumberList
	|	SymbolList
	;

NumberList :
	'(' entries+=NumberListEntry (',' entries+=NumberListEntry)* ')'
	;

NumberListEntry :
	  NumericLiteral
	| NumericInterval
	;
	
NumericInterval :
	lowerBound=NUMBER '-' upperBound=NUMBER
	;

SymbolList :
	'(' entries+=SymbolicLiteral (',' entries+=SymbolicLiteral)* ')'
	;

enum ProcedureLocation :
	SELF   = '$self'   |
	PARENT = '$parent' |
	ROOT   = '$root'
	;

enum UnaryExpressionOperator :
	PLUS  = '+' | 
	MINUS = '-' | 
	LC = 'lc' |
	UC = 'uc'
	;

enum ComparisonOperator : 
	EQ = '='  | EQ = 'eq' |
	NE = '<>' | NE = 'ne' |
	GT = '>'  | GT = 'gt' |
    GE = '>=' | GE = '=>' | GE = 'ge' |
	LT = '<'  | LT = 'lt' |
	LE = '<=' | LE = '=<' | LE = 'le'
	;
	
enum FunctionName :
		SIN    = 'sin'
	|	COS    = 'cos'
	|	TAN    = 'tan'
	|	EXP    = 'exp'
	|	LN     = 'ln'
	|	ABS    = 'abs'
	|	SQRT   = 'sqrt'
	|	LOG10  = 'log10'
	|	ARCSIN = 'arcsin'
	|	ARCCOS = 'arccos'
	|	ARCTAN = 'arctan'
	|	SIGN   = 'sign'
	|	FRAC   = 'frac'
	|	CEIL   = 'ceil'
	|	TRUNK  = 'trunk'
	|	FLOOR  = 'floor'
	;

terminal ID	// Xtext standard without ^ 
	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;

terminal DEPENDENCY_COMMENT
	:	(' '|'\t')* ('\r'? '\n*') !('\n'|'\r')*
	;

terminal STRING	// Xtext standard, but only enclosed in double quotes
	:	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\\') | !('\\'|'"') )* '"'
	;

terminal SYMBOL // enclosed in single quotes, no escapes, no line breaks, no tabs
	:	"'" ( !("'"|'\t'|'\n'|'\r') )* "'"
	; 

EXTENDED_ID
	: ID | SYMBOL;
//EXTENDED_ID hidden () // no whitespace might be used inside extended ids
//	:	(INT | ID | '/' | ':' | '-' | '.')+ 
//	;	

// bug has been filed as Xtext bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=303212
SHORTVAR // NOTE: due to a bug in Xtext, the following does not work: hidden () // no whitespace might be used inside shortvars // TODO verify this in SAP
	:	('?' | '#')? ID 
	;	

// TODO implement size restrictions for a number: e.g., the exponent's maximum value is 99
NUMBER
	:	('-'|'+')? INT ('.' INT)? ('e' ('-'|'+') INT)? // sign of exponent is mandatory in SAP
	;

/*
TODO:
 * handle characteristics with hyphens in their name. Use in dependencies code as: skey 'cstic-name-with-hyphens'
 * handle keywords 'INVISIBILITY', 'INV', 'SKEY'
 * handle intervals with "bound operators", e.g., >1 - <5
*/