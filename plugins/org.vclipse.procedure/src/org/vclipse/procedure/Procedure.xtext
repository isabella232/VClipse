/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
grammar org.vclipse.procedure.Procedure with org.vclipse.dependency.Dependency

import "http://www.vclipse.org/vcml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ProcedureSource:
	statements+=Statement (',' statements+=Statement)* '.'?
	;

Statement
	:	(SimpleStatement | CompoundStatement) ({ConditionalStatement.statement=current} 'if' condition=Condition)?
	;

CompoundStatement
	:	'(' statements+=SimpleStatement (',' statements+=SimpleStatement)* ')'
	;

SimpleStatement
	:	Assignment
	|	Function
	|	PFunction
	|	Table
	|	SetOrDelDefault
	|	IsInvisible
	|	SetPricingFactor
	;

Assignment
	:	'$self' '.' characteristic=[Characteristic | XID] '=' expression=Expression
    ;

SetOrDelDefault
	:	SetDefault
	|	DelDefault
	;

SetDefault
	:	'$set_default' '(' '$self' ',' characteristic=[Characteristic | XID] ',' expression=Expression ')'
	|	'$self' '.' characteristic=[Characteristic | XID] '?=' expression=Expression
    ;

DelDefault
	:	'$del_default' '(' '$self' ',' characteristic=[Characteristic | XID] ',' expression=Expression ')'
    ;

IsInvisible
	:	'$self' '.' characteristic=[Characteristic | XID] 'is' 'invisible'
	;
	
SetPricingFactor
	:	'$set_pricing_factor' '(' location=ProcedureLocation ',' characteristic=[Characteristic|XID] ',' arg1=Expression ',' arg2=Expression ')'
	;

CharacteristicReference returns CharacteristicReference_P :
	(location=ProcedureLocation '.')? characteristic=[Characteristic|XID]
	;

///////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////

PrimaryExpression returns Expression
	:	'(' Expression ')'
	|	Literal
	|	FunctionCall
	|	SumParts
	|	CountParts
	;	

Literal returns Literal
	:	CharacteristicReference
	|	MDataCharacteristic
	|	NumericLiteral
	|	SymbolicLiteral
	;

MDataCharacteristic returns MDataCharacteristic_P
	:	'mdata' characteristic=CharacteristicReference
	;

///////////////////////////////////////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////////////////////////////////////

// TODO not must not be used around specified, part_of and subpart_of - put into validation

PrimaryCondition returns Condition
	:	Comparison
	|	'(' Condition ')'
 	|	InCondition
 	|	IsSpecified
 	|   TypeOf
 	|	Table
 	|	Function
 	|	PFunction
	;

IsSpecified returns IsSpecified_P
	:	characteristic=CharacteristicReference 'specified'
	|	'specified' characteristic=CharacteristicReference
    ;

InCondition returns InCondition_P
	:	characteristic=CharacteristicReference 'in' list=List
	;

