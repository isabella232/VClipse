/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
grammar org.vclipse.constraint.Constraint with org.vclipse.dependency.Dependency

import "platform:/resource/org.vclipse.vcml.mm/src/org/vclipse/vcml/mm/VCML.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

ConstraintSource
	:   'objects' ':'	objects+=ConstraintObject (',' objects+=ConstraintObject)* '.'?

		('condition' ':' condition=Condition '.'?)?

		('restriction' | 'restrictions') ':'
		restrictions+=ConditionalConstraintRestriction (',' restrictions+=ConditionalConstraintRestriction)*
		'.'?

		('inferences' ':' inferences+=CharacteristicReference (',' inferences+=CharacteristicReference)* '.'?)?
    ;

ConstraintObject
	:	ConstraintClass
	|	ConstraintMaterial 
	;
	
ConstraintClass
	:	(name=SHORTVAR 'is_a')? class=[Class|CLASSNAME] 
		(	'where'
			shortVars+=ShortVarDefinition (';' shortVars+=ShortVarDefinition)*
		)?
	;

ConstraintMaterial
	:	(name=SHORTVAR 'is_object')? objectType=ObjectType
		(	'where'
			shortVars+=ShortVarDefinition (';' shortVars+=ShortVarDefinition)*
		)?
	;

ShortVarDefinition
	:	name=SHORTVAR '=' characteristic=[Characteristic | XID]
	;

PartOfCondition :
	'part_of' '(' child=[ConstraintObject | SHORTVAR] ',' parent=[ConstraintObject | SHORTVAR] ')'
	; 
SubpartOfCondition :
	'subpart_of' '(' child=[ConstraintObject | SHORTVAR] ',' parent=[ConstraintObject | SHORTVAR] ')'
	; 

ConditionalConstraintRestriction returns ConstraintRestriction :
	ConstraintRestrictionLHS ({ConditionalConstraintRestriction.restriction=current} 'if' condition=Condition)?
	;

ConstraintRestrictionFalse
	:	{ConstraintRestrictionFalse}
	   'false'
	;

ConstraintRestrictionLHS returns ConstraintRestriction
	:	InCondition
	|	IsSpecified
	|	PartOfCondition
	|	SubpartOfCondition
	|	Comparison
	|	Table
	|	Function
	|	NegatedConstraintRestrictionLHS
	|	ConstraintRestrictionFalse
	;
	
NegatedConstraintRestrictionLHS
	:	'not' restriction=(Table | Function)
	;

/*
EqualsRestriction :
	characteristic=CharacteristicReference '=' expression=Expression
	;
*/

CharacteristicReference returns CharacteristicReference_C
	:	ObjectCharacteristicReference
	|	ShortVarReference
	;
	
ObjectCharacteristicReference
	:	location=[ConstraintObject | SHORTVAR] '.' characteristic=[Characteristic|XID]
	;

ShortVarReference
	:	ref=[ShortVarDefinition | SHORTVAR]
	;

///////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////

Literal returns Literal
	:	CharacteristicReference
	| 	MDataCharacteristic
	|	NumericLiteral
	|	SymbolicLiteral
	;

MDataCharacteristic returns MDataCharacteristic_C
	:	'mdata' characteristic=CharacteristicReference
	;

///////////////////////////////////////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////////////////////////////////////

UnaryCondition returns UnaryCondition
	:	'not' condition=Negation // not may be nested in constraints
	;

// TODO not must not be used around specified, part_of and subpart_of - put into validation

PrimaryCondition returns Condition
	:	Comparison
	|	'(' Condition ')'
 	|	InCondition
 	|	IsSpecified
 	|	PartOfCondition
	|	SubpartOfCondition 
 	|	Table
 	|	Function
	;

IsSpecified returns IsSpecified_C
	:	characteristic=CharacteristicReference 'specified'
	|	'specified' characteristic=CharacteristicReference
    ;

InCondition returns InCondition_C
	:	characteristic=CharacteristicReference 'in' list=List
	;
