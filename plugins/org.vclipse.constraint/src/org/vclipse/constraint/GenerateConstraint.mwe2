/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
module org.vclipse.constraint.GenerateConstraint

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/vclipse/constraint/Constraint.xtext"
var file.extensions = "cons"
var projectName = "org.vclipse.constraint"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
	    registerGenModelFile = "platform:/resource/org.vclipse.vcml.mm/model/VCML.genmodel"
	    registerGeneratedEPackage = "org.vclipse.vcml.vcml.VcmlPackage"
		platformUri = "${runtimeProject}/.."
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.vclipse.vcml.mm/model/VCML.ecore"
			to = "platform:/resource/org.vclipse.vcml.mm/model/VCML.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.vclipse.vcml.mm/model/VCML.genmodel"
			to = "platform:/resource/org.vclipse.vcml.mm/model/VCML.genmodel"
		}
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.tests/src-gen"
	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		//pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI
			fileExtensions = file.extensions
			
			fragment = serializer.SerializerFragment auto-inject {
            	generateStub = false
            }

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment auto-inject{
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.ex.rt.AntlrGeneratorFragment auto-inject {
              antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			  options = {
					backtrack = true
					memoize = true
					ignoreCase = true
				}
			}

			fragment = parser.antlr.DebugAntlrGeneratorFragment auto-inject {
			}

			fragment = parser.antlr.ex.ExternalAntlrLexerFragment auto-inject {
				lexerGrammar = "org.vclipse.constraint.lexer.ConstraintLexer"
				runtime = true
				antlrParam = "-lib"
				antlrParam = "${runtimeProject}/src/org/vclipse/constraint/lexer"
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment auto-inject {
				composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {
				ignoreCase = true
			}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// generator API
			// fragment = generator.GeneratorFragment {}
			
			// formatter API 
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API 
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment auto-inject {}

			// content assist API  
			fragment = contentAssist.ContentAssistFragment auto-inject {}

			// rename refactoring  
			fragment = refactoring.RefactorElementNameFragment auto-inject {}
			
			// provides a compare view
			fragment = compare.CompareFragment auto-inject {
				fileExtensions = file.extensions
			}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {
              antlrParam = "-Xconversiontimeout" antlrParam = "10000"
			  options = {
					backtrack = true
					memoize = true
					ignoreCase = true
					classSplitting = true
				}
			}

			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.Junit4Fragment {}

			// provides a preference page for template proposals 
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a preference page for task tags 
			fragment = tasks.TaskTagPreferencePageFragment auto-inject {}
		}
	}
}
