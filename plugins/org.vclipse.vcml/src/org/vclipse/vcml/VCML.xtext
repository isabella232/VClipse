/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
grammar org.vclipse.vcml.VCML with org.eclipse.xtext.common.Terminals

import "http://www.vclipse.org/vcml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

VcmlModel
	:	{VcmlModel}
		imports+=Import*
	    ('options' '{' options+=Option* '}')?
    	(objects+=VCObject)*
    ;

Import
    :   'import' importURI=STRING
    ;

Option
	: name=OptionType '=' value=STRING
	;
	
enum OptionType
	: ECM // engineering change master
	| UPS // set to ID of header material, if UPS IDocs and segments should be generated
	| KeyDate
	;

VCObject 
	:	Characteristic
	| 	Class
	| 	Constraint 
	| 	SelectionCondition 
	| 	Precondition 
	| 	Procedure 
	| 	DependencyNet
	| 	Material
	| 	InterfaceDesign
	| 	VariantFunction
	| 	VariantTable
	| 	VariantTableContent
	| 	BillOfMaterial
	| 	ConfigurationProfile
	;

BillOfMaterial :
	{BillOfMaterial}
	'billofmaterial' name=EXTENDED_ID ('[' options+=Option* ']')? '{'
		('material' material=[Material|EXTENDED_ID])?
		('items' '{' items+=BOMItem* '}')?
	'}'
	;

BOMItem : BOMItem_Material | BOMItem_Class;

BOMItem_Material :
	itemnumber=INT
	material=[Material | EXTENDED_ID]
	('dependencies' '{'
	  (selectionCondition=[SelectionCondition | EXTENDED_ID])?
	  (entries+=ConfigurationProfileEntry)*
	 '}')?
	;

BOMItem_Class :
	itemnumber=INT
	cls=[Class | CLASSNAME]
	('dependencies' '{'
	  (selectionCondition=[SelectionCondition | EXTENDED_ID])?
	  (entries+=ConfigurationProfileEntry)*
	 '}')?
	;

Characteristic :
	'characteristic' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
	(	description=Description
	&	documentation=Documentation?
	&	type=CharacteristicType
	&	('status' status=Status)?
	&	('group' group=STRING)?
	&	('[' (  additionalValues?='additionalValues'?
	     	  & required?='required'?
	     	  & restrictable?='restrictable'?
	     	  & noDisplay?='noDisplay'?
	    	  & notReadyForInput?='notReadyForInput'?
	   	      & multiValue?='multiValue'?
	    	  & displayAllowedValues?='displayAllowedValues'?
	    	  & ('table' table=XID 'field' field=XID)?
	     	 )
		']')?
    &	dependencies=CharacteristicOrValueDependencies?
    )
	'}')?
	;

CharacteristicType :
		NumericType
	|	SymbolicType
	|	DateType
	;

NumericType : 
	'numeric' '{'
	(	('numberOfChars' numberOfChars=INT)
	&	('decimalPlaces' decimalPlaces=INT)
	&	('unit' unit=STRING)?
	&	('[' (	negativeValuesAllowed?='negativeValuesAllowed'?
	     	 &	intervalValuesAllowed?='intervalValuesAllowed'?
	     	 )
	 	']')?
	&	('values' '{' values+=NumericCharacteristicValue* '}')?
	)
	'}'
	;
	
SymbolicType :
	'symbolic' '{'
	(	('numberOfChars' numberOfChars=INT)
	&	('[' caseSensitive?='caseSensitive'? ']')?
	&	('values' '{' values+=CharacteristicValue* '}')?
	)
	'}'
	;

CharacteristicValue :
	default?='*'?
	name=EXTENDED_ID
		(('{'
	  	(	description=Description?
	  	&	documentation=Documentation?
	  	&	dependencies=CharacteristicOrValueDependencies?
	 	)
		'}')?
	);

NumericCharacteristicValue :
	default?='*'?
	entry=NumberListEntryForValues
		(('{'
	 	 (	documentation=Documentation?
	  	&	dependencies=CharacteristicOrValueDependencies?
	  	)
		'}')?
	);

DateType : 
	{DateType}
	'date' '{'
	(	('[' (	intervalValuesAllowed?='intervalValuesAllowed'?
	     	 )
	 	']')?
	&	('values' '{' values+=DateCharacteristicValue* '}')?
	)
	'}'
	;
	
DateCharacteristicValue :
	default?='*'?
	(from=DATE ('-' to=DATE)?
		(('{'
	  	(	documentation=Documentation?
	  	&	dependencies=CharacteristicOrValueDependencies?
	  	)
		'}')?
	));

DATE : INT '.' INT '.' INT;

CharacteristicOrValueDependencies :
	{CharacteristicOrValueDependencies}
	'dependencies' '{'
		dependencies+=[Dependency | EXTENDED_ID]*
	'}'
	;

Class :
	'class' name=CLASSNAME ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	('status' status=Status)?
		&	('group' group=STRING)?
		&	('characteristics' '{' 
				characteristics+=[Characteristic|EXTENDED_ID]* 
			'}')?
		&	('superclasses' '{' 
				superClasses+=[Class | CLASSNAME]*
			'}')?
		)
	'}')?
	;

CLASSNAME
	:	'(' INT ')' EXTENDED_ID
	;

/*
 * 
CharacteristicReference
	:	ref=[Characteristic|EXTENDED_ID]
	;

CharacteristicOverride
	:	ref=[Characteristic|EXTENDED_ID] '{'
		// welche Objekte?
		'}'
	;
 */

ConfigurationProfile :
    'configurationprofile' name=EXTENDED_ID ('[' options+=Option* ']')? '{'
	   (	('material' material=[Material|EXTENDED_ID])?
	   &	('status' status=Status)?
	   &	('bomapplication' bomapplication=EXTENDED_ID)?
	   &	('uidesign' uidesign=[InterfaceDesign | EXTENDED_ID])?
	   &    ('fixing' fixing=Fixing)?
	   )
       (dependencyNets+=[DependencyNet|EXTENDED_ID])*
       (entries+=ConfigurationProfileEntry)*
    '}'
    ;

Procedure :
    'procedure' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
		&	('group' group=STRING)?
    	)
    '}')?
    ;

SelectionCondition :
    'selectioncondition' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
		&	('group' group=STRING)?
    	)
    '}')?
    ;

Precondition :
    'precondition' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
   	)
    '}')?
    ;

DependencyNet :
	'dependencynet' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
 		)
		(constraints+=[Constraint | EXTENDED_ID])*
	'}')?
	;

Constraint :
    'constraint' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	documentation=Documentation?
		&	('status' status=Status)?
 		&	('group' group=STRING)?
    	)
    '}')?
    ;

ConfigurationProfileEntry :
    sequence=INT dependency=[Procedure|EXTENDED_ID]
    ;

InterfaceDesign :
	'interfacedesign' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(characteristicGroups+=CharacteristicGroup)*
	'}')?
	;

CharacteristicGroup :
	'characteristicgroup' name=EXTENDED_ID '{'
		description=Description?
		(characteristics+=[Characteristic | EXTENDED_ID])*
	'}'
	;    

Material : 
	'material' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(description=Description 
		& ('type' type=EXTENDED_ID)
		& ('billofmaterials' '{' billofmaterials+=[BillOfMaterial|EXTENDED_ID]* '}')?
		& ('configurationprofiles' '{' configurationprofiles+=[ConfigurationProfile|EXTENDED_ID]* '}')?
		& ('classes' '{' classifications+=Classification* '}')?
		)
	'}')?
	;

Classification :
	cls=[Class|CLASSNAME] ('{' valueAssignments+=ValueAssignment* '}')?
	;

ValueAssignment :
	characteristic=[Characteristic | EXTENDED_ID]
	'='
	values+=(NumericLiteral | SymbolicLiteral)+
	;
	
VariantFunction :
	'variantfunction' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
		(	description=Description
		&	('status' status=Status)?
		&	('group' group=STRING)?
		&	('arguments' '{' (arguments+=VariantFunctionArgument)* '}')
		)
		'}')?
	; 
	
VariantFunctionArgument
	:	(in?='in')? characteristic=[Characteristic|EXTENDED_ID]
	;
	
VariantTable
	:	'varianttable' name=EXTENDED_ID ('[' options+=Option* ']')? ('{'
			(	description=Description
			&	('status' status=Status)?
			&	('group' group=STRING)?
			&	('arguments' '{' (arguments+=VariantTableArgument)* '}')
			)
		'}')?
	; 
	
VariantTableArgument
	:	(key?='key')? characteristic=[Characteristic|EXTENDED_ID]
	;

VariantTableContent
	:	'varianttablecontent' table=[VariantTable | EXTENDED_ID] ('[' options+=Option* ']')? '{'
			rows += Row*
		'}'
	;

Row 
	:	{Row}
		'row' values+=(SymbolicLiteral | NumericLiteral)*
	;

// auxiliary grammar rules
enum Status : Released = 'released' | InPreparation = 'inPreparation' | Locked = 'locked';

enum Fixing : Entry = 'entry' | TopDown = 'top-down' | BottomUp = 'bottom-up' | None = 'none';

Description : 
	  SimpleDescription
	| MultiLanguageDescriptions
	;
	
SimpleDescription :
    'description' value=STRING
    ;

MultiLanguageDescriptions : 
	{MultiLanguageDescriptions}
	'description' '{' (descriptions+=MultiLanguageDescription)* '}'
	;

MultiLanguageDescription :
	language=Language value=STRING
	;
	 
enum Language
	:	AF // Afrikaans       
	|	AR // Arabic          
	|	BG // Bulgarian       
	|	CA // Catalan         
	|	CS // Czech           
	|	DA // Danish          
	|	DE // German          
	|	EL // Greek           
	|	EN // English         
	|	ES // Spanish         
	|	ET // Estonian        
	|	FI // Finnish         
	|	FR // French          
	|	HE // Hebrew          
	|	HR // Croatian        
	|	HU // Hungarian       
	|	ID // Indonesian      
	|	IS // Icelandic       
	|	IT // Italian         
	|	JA // Japanese        
	|	KO // Korean          
	|	LT // Lithuanian      
	|	LV // Latvian         
	|	MS // Malaysian       
	|	NL // Dutch           
	|	NO // Norwegian       
	|	PL // Polish          
	|	PT // Portuguese      
	|	RO // Romanian        
	|	RU // Russian         
	|	SH // Serbian (Latin) 
	|	SK // Slovakian       
	|	SL // Slovenian       
	|	SR // Serbian         
	|	SV // Swedish         
	|	TH // Thai            
	|	TR // Turkish         
	|	UK // Ukrainian       
	|	Z1 // Customer reserve
	|	ZF // Chinese trad.   
	|	ZH // Chinese         
	;

Documentation :
	  SimpleDocumentation
	| MultipleLanguageDocumentation
	;
	
SimpleDocumentation :
	'documentation' value=STRING
	;
	
MultipleLanguageDocumentation :
	{MultipleLanguageDocumentation}
	'documentation' '{' (languageblocks+=MultipleLanguageDocumentation_LanguageBlock)* '}'
	;

MultipleLanguageDocumentation_LanguageBlock :
	language=Language (formattedDocumentationBlocks+=FormattedDocumentationBlock)*
	;

FormattedDocumentationBlock :
	value=STRING ('format' format=STRING)?
	; 


terminal ID	// Xtext standard without ^ 
	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;

terminal STRING	// Xtext standard, but only enclosed in double quotes
	:	'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\\') | !('\\'|'"') )* '"'
	;

terminal SYMBOL // enclosed in single quotes, no escapes, no line breaks, no tabs
	:	"'" ( !("'"|'\t'|'\n'|'\r') )* "'"
	; 

XID
	:	ID
	|	'AF'
	|	'AR'
	|	'BG'
	|	'CA'
	|	'CS'
	|	'DA'
	|	'DE'
	|	'EL'
	|	'EN'
	|	'ES'
	|	'ET'
	|	'FI'
	|	'FR'
	|	'HE'
	|	'HR'
	|	'HU'
	|	'ID'
	|	'IS'
	|	'IT'
	|	'JA'
	|	'KO'
	|	'LT'
	|	'LV'
	|	'MS'
	|	'NL'
	|	'NO'
	|	'PL'
	|	'PT'
	|	'RO' 
	|	'RU'
	|	'SH'
	|	'SK'
	|	'SL'
	|	'SR'
	|	'SV'
	|	'TH'
	|	'TR'
	|	'UK'
	|	'Z1'
	|	'ZF'
	|	'ZH'
	|	'e'
	;

EXTENDED_ID
	: XID
	| SYMBOL
	;
//EXTENDED_ID hidden () // no whitespace might be used inside extended ids
//	:	(INT | ID | '/' | ':' | '-' | '.')+ 
//	;	


/*
TODO:
 * handle characteristics with hyphens in their name. Use in dependencies code as: skey 'cstic-name-with-hyphens'
 * handle keywords 'INVISIBILITY', 'INV', 'SKEY'
 * handle intervals with "bound operators", e.g., >1 - <5
*/

NumericLiteral :
	value=NUMBER
	;

SymbolicLiteral :
	value=SYMBOL
	;

// TODO implement size restrictions for a number: e.g., the exponent's maximum value is 99
// TODO use value converter
NUMBER hidden ()
	:	('-'|'+')? INT ('.' INT)? ('e' ('-'|'+') INT)?
	;

NumberListEntryForValues returns NumberListEntry :
	  NumericLiteral
	| '(' NumericInterval ')'
	;
	
NumericInterval :
	lowerBoundOp=('<' | '<=' | '>' | '>=')? lowerBound=NUMBER '-' upperBoundOp=('<' | '<=' | '>' | '>=')?  upperBound=NUMBER
	;

