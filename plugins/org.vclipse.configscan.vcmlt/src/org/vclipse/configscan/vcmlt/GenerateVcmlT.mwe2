/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator and others
 * 		www.webxcerpt.com
 ******************************************************************************/
module org.vclipse.configscan.vcmlt.GenerateVcmlT

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/vclipse/configscan/vcmlt/VcmlT.xtext"
var file.extensions = "vcmlt"
var projectName = "org.vclipse.configscan.vcmlt"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
        scanClassPath = true
        registerGenModelFile = "platform:/resource/org.vclipse.vcml.mm/model/VCML.genmodel"
	    registerGeneratedEPackage = "org.vclipse.vcml.vcml.VcmlPackage"
        platformUri = "${runtimeProject}/.."
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.ecore"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.eclipse.emf.ecore/model/Ecore.genmodel"
			to = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
		}
		uriMap = {
			from = "platform:/plugin/org.vclipse.vcml.mm/model/VCML.ecore"
			to = "platform:/resource/org.vclipse.vcml.mm/model/VCML.ecore"
		}
		uriMap = {
			from = "platform:/plugin/org.vclipse.vcml.mm/model/VCML.genmodel"
			to = "platform:/resource/org.vclipse.vcml.mm/model/VCML.genmodel"
		}
   	}

    component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	
//	component = DirectoryCleaner {
//		directory = "${runtimeProject}.tests/src-gen"
//	}
	
	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

    component = Generator {
        pathRtProject = runtimeProject
        pathUiProject = "${runtimeProject}.ui"
        //pathTestProject = "${runtimeProject}.tests"
        projectNameRt = projectName
        projectNameUi = "${projectName}.ui"
        language = auto-inject {
            uri = grammarURI
            fileExtensions = file.extensions

            // Java API to access grammar elements (required by several other fragments)
            fragment = grammarAccess.GrammarAccessFragment auto-inject {}

            // generates Java API for the generated EPackages
            fragment = ecore.EcoreGeneratorFragment auto-inject {}

            // Serializer 2.0
            fragment = serializer.SerializerFragment auto-inject  {
            	generateStub = false
            }
            
            // the serialization component (1.0)
            // fragment = parseTreeConstructor.ParseTreeConstructorFragment {}

            // a custom ResourceFactory for use with EMF
            fragment = resourceFactory.ResourceFactoryFragment auto-inject {
                fileExtensions = file.extensions
            }

            // The antlr parser generator fragment.
            fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
            //  options = {
            //      backtrack = true
            //  }
            }

            // java-based API for validation
            fragment = validation.JavaValidatorFragment auto-inject {
            //    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
            //    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
            }

            // scoping and exporting API
            fragment = scoping.ImportURIScopingFragment auto-inject {}
            fragment = exporting.SimpleNamesFragment auto-inject {}

            // scoping and exporting API
            // fragment = scoping.ImportNamespacesScopingFragment {}
            // fragment = exporting.QualifiedNamesFragment {}
            fragment = builder.BuilderIntegrationFragment auto-inject {}

            // generator API
            // fragment = generator.GeneratorFragment {}

            // formatter API
            fragment = formatting.FormatterFragment auto-inject {}

            // labeling API
            fragment = labeling.LabelProviderFragment {}

            // outline API
            fragment = outline.OutlineTreeProviderFragment auto-inject {}
            fragment = outline.QuickOutlineFragment auto-inject {}

            // quickfix API
            fragment = quickfix.QuickfixProviderFragment auto-inject {}

            // content assist API
            fragment = contentAssist.ContentAssistFragment auto-inject {}

            // generates a more lightweight Antlr parser and lexer tailored for content assist
            fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}

            // generates junit test support classes into Generator#pathTestProject
            //fragment = junit.Junit4Fragment {}

            // project wizard (optional)
            // fragment = projectWizard.SimpleProjectWizardFragment {
            //      generatorProjectName = "${projectName}"
            //      modelFileExtension = file.extensions
            // }

            // rename refactoring
            fragment = refactoring.RefactorElementNameFragment auto-inject {}

            // provides a preference page for template proposals
            fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

            // provides a compare view
            fragment = compare.CompareFragment auto-inject {
                 fileExtensions = file.extensions
            }

			// provides a preference page for task tags 
			fragment = tasks.TaskTagPreferencePageFragment auto-inject {}
        }
    }
}
