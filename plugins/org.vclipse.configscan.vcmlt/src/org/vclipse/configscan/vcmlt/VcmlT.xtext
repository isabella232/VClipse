grammar org.vclipse.configscan.vcmlt.VcmlT with org.eclipse.xtext.common.Terminals

import "platform:/resource/org.vclipse.vcml.mm/src/org/vclipse/vcml/mm/VCML.ecore" as VCML

generate vcmlT "http://www.vclipse.org/configscan/vcmlt/VcmlT"

// ToDo
// MV Cstics

Model
	:	imports+=Import*
	    testcase=TestCase
		testgroups+=TestGroup*
	;
	
Import
	:	'import' importURI=STRING
	;

// ToDo: define version and part syntax more exactly
TestCase
	:	'testcase' item=[VCML::Material|EXTENDED_ID]
		('['	(
					('document' document=STRING)
				&	('description' description=STRING)
				&	('version' version=STRING)?
				&	('part' part=STRING)?
				)
        ']')?
	;

TestGroup
	:	'testgroup' name=EXTENDED_ID (description=STRING)?
        ('['    (   ('status' status=Status)?
                &   ('mode' mode=Mode)?
                )
         ']')?
		
		'{'
            items+=ItemContainer*
		'}'
	;

enum Status
    :   released // default value - must be first element
    |   inPreparation
    |   locked
    ;
    	
enum Mode
	:   success // default value - must be first element
	|	failure
	;	

ItemContainer
    :   type=ItemType item=[VCML::Material|EXTENDED_ID] '{'
            actions+=Action*
        '}'
    ;

enum ItemType
    :   context  // or kmat?? or material??
    ;    
	
Action
    :   SetValue
    |   CheckSingleValue
    |   CheckStatus
    |   CheckDomain
    |   CheckConflict
    |   CheckComplete
    |   CheckBomItemExists
    |   CheckBomCountItems
    |   BOM
    |   ItemContainer
    |   TestGroup
	;

SetValue
	:	cstic=[VCML::Characteristic] '=' value=Literal
	;

// ToDo: include setting for author if reasonable as in cmlt	
CheckSingleValue
	:	'check' cstic=[VCML::Characteristic] ('=' value=SymbolicLiteral)?
	|	'check' cstic=[VCML::Characteristic] operator=Operator value=NumericLiteral
	|	'check' cstic=[VCML::Characteristic] 'in' value=NumericInterval
	;

CheckStatus
    :   'check' cstic=[VCML::Characteristic] status+=CsticState+
    ;
	
CheckDomain
    :   'checkDomain' strict?='strict'? cstic=[VCML::Characteristic] '{'
            values+=DomainValue*
        '}'
    ;

DomainValue
    :   no?='no'? literal=Literal
    ;

CheckConflict
    :   {CheckConflict}
        (conflict?='conflict' | 'consistent')
    ;
    
CheckComplete
    :   {CheckComplete}
        (complete?='complete' | 'incomplete')
    ;
	
enum CsticState
    :   visible
    |   invisible = 'hidden'            // 'hidden' reserved by xtext
    |   enabled
    |   disabled
    |   set
    |   unset
    ;

BOM
    :   {BOM}
    	'bom' '{'
            equations+=Equation*
        '}'
    ;
    
Equation
    :   material=MaterialLiteral operator=Operator amount=NumericLiteral
    ;

	
enum Operator
    :   LT='<'
    |   LE='<='
    |   NE='!='  // ToDo: Doublecheck ConfigScan syntax
    |   EQ='='
    |   GE='>='
    |   GT='>'
    ;
    
NumericInterval
	:
		'(' '>'? value=NumericLiteral '-' '<'? value=NumericLiteral ')'  // ToDo: Doublecheck ConfigScan syntax, and what makes sense here
	;
    
NUMBER
    :   INT ('.' INT)?
    ;
    
EXTENDED_ID
    :   ID | SYMBOL
    ;
    
Literal returns VCML::Literal
    :   NumericLiteral
    |   SymbolicLiteral
    ;
    
NumericLiteral returns VCML::NumericLiteral
    :   value=NUMBER
    ;

SymbolicLiteral returns VCML::SymbolicLiteral
    :   value=SYMBOL
	;

MaterialLiteral  // no VCML::MaterialLiteral ??
    :   '#' material=[VCML::Material|EXTENDED_ID]
    ;   
    
terminal STRING // Xtext standard, but only enclosed in double quotes
    :   '"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\\') | !('\\'|'"') )* '"'
    ;

terminal SYMBOL // enclosed in single quotes, no escapes, no line breaks, no tabs
    :   "'" ( !("'"|'\t'|'\n'|'\r') )* "'"
    ; 		

// ToDo: should only apply to materials with bom
CheckBomCountItems
	:	'check' 'countitems' '=' value=INT ('@' bompath=BomPath)?		
	;
	
CheckBomItemExists
	:	'check' (exists?='exists' | 'notexists') ('@' bompath=BomPath)?		
	;

BomPath
	:	{BomPath}
		'/' ('(' position=INT ')')? material=[VCML::Material|EXTENDED_ID]? child=BomPath?
	;