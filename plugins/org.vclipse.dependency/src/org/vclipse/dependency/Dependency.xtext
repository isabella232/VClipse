/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
grammar org.vclipse.dependency.Dependency hidden(WS, SL_COMMENT)

import "platform:/resource/org.vclipse.vcml.mm/src/org/vclipse/vcml/mm/VCML.ecore"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore


///////////////////////////////////////////////////////////////////////////////
// Expressions
///////////////////////////////////////////////////////////////////////////////

Expression returns Expression
    :	MultiplicativeExpression ({BinaryExpression.left=current} operator=("+" | '-') right=MultiplicativeExpression)*
	;
	
MultiplicativeExpression returns Expression
	:	UnaryPrimaryExpression ({BinaryExpression.left=current} operator=('*' | '/' | '||') right=UnaryPrimaryExpression)*
    ;

UnaryPrimaryExpression returns Expression
	:	UnaryExpression
	|	PrimaryExpression
	;

UnaryExpression returns UnaryExpression
	:	operator=UnaryExpressionOperator expression=UnaryPrimaryExpression
	;
	
PrimaryExpression returns Expression
	:	'(' Expression ')'
	|	Literal
	|	FunctionCall
	;	

Literal returns Literal
	:	NumericLiteral
	|	SymbolicLiteral
	;

FunctionCall returns FunctionCall
	:	function=FunctionName '(' argument=Expression ')'
	;

NumericLiteral :
	value=NUMBER
	;

SymbolicLiteral :
	value=SYMBOL
	;

///////////////////////////////////////////////////////////////////////////////
// Conditions
///////////////////////////////////////////////////////////////////////////////

Condition returns Condition
	:	Conjunction ({BinaryCondition.left=current} operator='or' right=Conjunction)* 
	; 

Conjunction returns Condition
	:	Negation ({BinaryCondition.left=current} operator='and' right=Negation)*
	; 

Negation returns Condition
	:	UnaryCondition
	|	PrimaryCondition
	;

UnaryCondition returns UnaryCondition
	:	'not' condition=PrimaryCondition
	;

PrimaryCondition returns Condition
	:	Comparison
	|	'(' Condition ')'
	;

Comparison returns Comparison
	:	left=Expression operator=ComparisonOperator right=Expression
	;

List :
		NumberList
	|	SymbolList
	;

NumberList :
	'(' entries+=NumberListEntry (',' entries+=NumberListEntry)* ')'
	;

NumberListEntry :
	  NumericLiteral
	| NumericInterval
	;
	
NumberListEntryForValues returns NumberListEntry :
	  NumericLiteral
	| '(' NumericInterval ')'
	;
	
NumericInterval :
	lowerBound=NUMBER '-' upperBound=NUMBER
	;

SymbolList :
	'(' entries+=SymbolicLiteral (',' entries+=SymbolicLiteral)* ')'
	;


ObjectType
	:	'(' type='material' ')' '(' classType=INT ')' '(' attrs+=PartialKey (',' attrs+=PartialKey)* ')'
	;

 // TODO how to handle cross references?
PartialKey
	:	key='nr' '=' material=[Material|SYMBOL]
	;

///////////////////////////////////////////////////////////////////////////////
// Rules used in some, but not all languages
///////////////////////////////////////////////////////////////////////////////

Function returns Function
	:	'function' function=[VariantFunction|XID]
		'('
			characteristics+=[Characteristic|XID] '=' values+=Literal
			(',' characteristics+=[Characteristic|XID] '=' values+=Literal)*
		')'
	;

PFunction
	:	'pfunction' function=[VariantFunction|XID]
		'('
			(	characteristics+=[Characteristic|XID] '=' values+=Literal
				(',' characteristics+=[Characteristic|XID] '=' values+=Literal)*
			)?
		')'
	;

Table returns Table
	:	'table' table=[VariantTable|XID]
		'('
			characteristics+=[Characteristic|XID] '=' values+=Literal
			(',' characteristics+=[Characteristic|XID] '=' values+=Literal)*
		')'
	;

SumParts
	:	'$sum_parts' '(' location=ProcedureLocation ',' characteristic=[Characteristic|XID] ')'
	;

CountParts
	:	'$count_parts' '(' location=ProcedureLocation ')'
	; 

TypeOf
	:	'type_of' '(' location=ProcedureLocation ',' variantclass=ObjectType ')'
	;
	 
enum ProcedureLocation :
	SELF   = '$self'   |
	PARENT = '$parent' |
	ROOT   = '$root'
	;
	
enum UnaryExpressionOperator :
	PLUS  = '+' | 
	MINUS = '-' | 
	LC = 'lc' |
	UC = 'uc'
	;

enum ComparisonOperator : 
	EQ = '='  | EQ = 'eq' |
	NE = '<>' | NE = 'ne' |
	GT = '>'  | GT = 'gt' |
    GE = '>=' | GE = '=>' | GE = 'ge' |
	LT = '<'  | LT = 'lt' |
	LE = '<=' | LE = '=<' | LE = 'le'
	;
	
enum FunctionName :
		SIN    = 'sin'
	|	COS    = 'cos'
	|	TAN    = 'tan'
	|	EXP    = 'exp'
	|	LN     = 'ln'
	|	ABS    = 'abs'
	|	SQRT   = 'sqrt'
	|	LOG10  = 'log10'
	|	ARCSIN = 'arcsin'
	|	ARCCOS = 'arccos'
	|	ARCTAN = 'arctan'
	|	SIGN   = 'sign'
	|	FRAC   = 'frac'
	|	CEIL   = 'ceil'
	|	TRUNK  = 'trunk'
	|	FLOOR  = 'floor'
	;

terminal ID	// Xtext standard without ^ 
	:	('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*
	;

terminal SL_COMMENT
	:	'*' !(('\n'|'\r'))* ('\r'? '\n')?
	;

terminal SYMBOL // enclosed in single quotes, no escapes, no line breaks, no tabs
	:	"'" ( !("'"|'\t'|'\n'|'\r') )* "'"
	; 

terminal INT returns ecore::EInt: ('0'..'9')+;
terminal STRING	: 
			'"' ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|'"') )* '"' |
			"'" ( '\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\') | !('\\'|"'") )* "'"
		; 

terminal WS			: (' '|'\t'|'\r'|'\n')+;

terminal ANY_OTHER: .;

XID
	:	ID
	|	'e'
	;

EXTENDED_ID
	: XID
	| SYMBOL
	;

//EXTENDED_ID hidden () // no whitespace might be used inside extended ids
//	:	(INT | ID | '/' | ':' | '-' | '.')+ 
//	;	

// bug has been filed as Xtext bug https://bugs.eclipse.org/bugs/show_bug.cgi?id=303212
SHORTVAR // NOTE: due to a bug in Xtext, the following does not work: hidden () // no whitespace might be used inside shortvars // TODO verify this in SAP
	:	('?' | '#')? XID 
	;	

// TODO implement size restrictions for a number: e.g., the exponent's maximum value is 99
NUMBER hidden ()
	:	('-'|'+')? INT ('.' INT)? ('e' ('-'|'+') INT)? // sign of exponent is mandatory in SAP
	;

CLASSNAME
	:	'(' INT ')' XID
	;

/*
TODO:
 * handle characteristics with hyphens in their name. Use in dependencies code as: skey 'cstic-name-with-hyphens'
 * handle keywords 'INVISIBILITY', 'INV', 'SKEY'
 * handle intervals with "bound operators", e.g., >1 - <5
*/

