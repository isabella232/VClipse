/*******************************************************************************
 * Copyright (c) 2010 - 2013 webXcerpt Software GmbH.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *  
 * Contributors:
 *     	webXcerpt Software GmbH - initial creator
 * 		www.webxcerpt.com
 ******************************************************************************/
module org.vclipse.idoc.IDoc

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/vclipse/idoc/IDoc.xtext"
var file.extensions = "idoc"
var projectName = "org.vclipse.idoc"
var runtimeProject = "../${projectName}"

Workflow {
    bean = StandaloneSetup {
	    scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		//pathTestProject = "${runtimeProject}.tests"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
    		fragment = grammarAccess.GrammarAccessFragment auto-inject {}

			// generates Java API for the generated EPackages 
    		fragment = ecore.EcoreGeneratorFragment auto-inject {
			// referencedGenModels = "
			// 	platform:/resource/org.eclipse.xtext.xbase/model/Xbase.genmodel,
			// 	platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel
			// "
			}

            // Serializer 2.0
//            fragment = serializer.SerializerFragment {
//            	generateStub = false
//            }
			// the serialization component
			fragment = parseTreeConstructor.ParseTreeConstructorFragment auto-inject {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment auto-inject {
			//  options = {
			//		backtrack = true
			//	}
			}

			// java-based API for validation 
			fragment = validation.ValidatorFragment auto-inject {
				// composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				// registerForImportedPackages = true
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			// fragment = scoping.ImportNamespacesScopingFragment {}
			// fragment = exporting.QualifiedNamesFragment {}
			// fragment = builder.BuilderIntegrationFragment {}

			// generator API
			// fragment = generator.GeneratorFragment {}
			
    		// formatter API
    		fragment = formatting.FormatterFragment auto-inject {}
    
    		// labeling API
    		fragment = labeling.LabelProviderFragment auto-inject {}
    
    		// outline API
    		fragment = outline.OutlineTreeProviderFragment auto-inject {}
    		fragment = outline.QuickOutlineFragment auto-inject {}
    

    		// quickfix API
    		fragment = quickfix.QuickfixProviderFragment auto-inject {}
    
    		// content assist API
    		fragment = contentAssist.ContentAssistFragment auto-inject {}
    
    		// generates a more lightweight Antlr parser and lexer tailored for content assist
    		fragment = parser.antlr.XtextAntlrUiGeneratorFragment auto-inject {}
    
			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.Junit4Fragment {}

			// project wizard (optional) 
			// fragment = projectWizard.SimpleProjectWizardFragment {
			// 		generatorProjectName = "${projectName}.generator" 
			//		modelFileExtension = file.extensions
			// }
			
			// rename refactoring  
			// fragment = refactoring.RefactorElementNameFragment {}
			
			// fragment = types.TypesGeneratorFragment {}
			// generates the required bindings only if the grammar inherits from Xbase
			// fragment = xbase.XbaseGeneratorFragment {}
			
			// provides a preference page for template proposals 
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			fragment = compare.CompareFragment auto-inject {
				fileExtensions = file.extensions
			}

		}
	}
}
